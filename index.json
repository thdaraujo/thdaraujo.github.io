[{"content":"You need to change production data. You know that doing it manually is unsafe and will definetely cause lots of trouble, like corrupting all you customer\u0026rsquo;s data.\nHow else should you do it?\nYou might be spending a lot of time asking yourself these questions:\n Is there a proper rails way to change data in production? Should I run data and schema modifications in one database migration? Should I run rake scripts in production to modify data? Should I use a specialized data migration gem?  You will get different answers depending on whom you ask. Some people will tell you that changing data with a database migration is an anti-pattern and migrations should only contain schema changes.\nBut isn\u0026rsquo;t the whole point of a migration to be a good way to define a point-in-time transition of database structure or data, using code?\nIf you have a larger application or a mission-critical system, you should be careful about how you update production data, as this can lead to downtime and big problems. This post won\u0026rsquo;t cover this scenario.\nHowever, if your app is still relatively new and small, this post is for you. Here\u0026rsquo;s how you can use data migrations to change production data without shooting yourself in the foot.\n1. Schema changes and data changes are like water and oil: they shouldn\u0026rsquo;t hangout together Write data manipulation code in separate Rails migrations and give them proper names. NEVER change schema and data in the same migration.\nAnother tip: consider separating complicated migrations and code changes in multiple pull requests you can merge and deploy separately. That way you can incrementally change the database and catch errors or rollback more easily.\n2. Stick to plain old SQL, if you can Careful when using models in migrations. It\u0026rsquo;s better to just write data manipulation as Arel or plain SQL queries and not use models at all, because if you change the model, your old migrations might break.\nSQL is independent from ActiveRecord model\u0026rsquo;s definitions, queries won\u0026rsquo;t trigger callbacks, and most importantly: any future code changes to a model won\u0026rsquo;t cause you a world of pain.\nWell-written SQL queries can be really fast. Just be careful and make sure you\u0026rsquo;re updating the right things.\nAlways ask yourself: Am I missing a where statement here somewhere?\nSee this nice example from Discourse of a simple data migration:\nclass MigrateAtDesktopBookmarkReminders \u0026lt; ActiveRecord::Migration[6.0] def up DB.exec( \u0026lt;\u0026lt;~SQL, now: Time.zone.now UPDATE bookmarks SET reminder_type = NULL, reminder_at = NULL, updated_at = :now WHERE reminder_type = 0 SQL ) end def down # add some code to revert this migration, if possible end end 3. Strong Migrations (optional) Consider adding the strong_migrations gem to your project and following its suggestions as much as possible. These guidelines will help you catch unsafe migration code during development and teach you some good practices.\nPay special attention to the warnings related to adding indexes and default values to existing columns, as this can cause downtime.\nDoing these things will put you in a good spot and make your life easier in the future.\n","permalink":"https://www.thd.codes/posts/rails-data-migrations/","summary":"You need to change production data. You know that doing it manually is unsafe and will definetely cause lots of trouble, like corrupting all you customer\u0026rsquo;s data.\nHow else should you do it?\nYou might be spending a lot of time asking yourself these questions:\n Is there a proper rails way to change data in production? Should I run data and schema modifications in one database migration? Should I run rake scripts in production to modify data?","title":"How should I change production data on a new Rails application?"},{"content":"","permalink":"https://www.thd.codes/search/","summary":"search","title":"Search"}]