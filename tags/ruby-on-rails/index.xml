<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on rails on thd.codes</title>
    <link>https://www.thd.codes/tags/ruby-on-rails/</link>
    <description>Recent content in ruby on rails on thd.codes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jun 2021 11:53:56 -0700</lastBuildDate><atom:link href="https://www.thd.codes/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Write a Clean Order By Case Query with Arel on Rails</title>
      <link>https://www.thd.codes/posts/how-to-write-order-by-case-query-with-arel/</link>
      <pubDate>Thu, 10 Jun 2021 11:53:56 -0700</pubDate>
      
      <guid>https://www.thd.codes/posts/how-to-write-order-by-case-query-with-arel/</guid>
      <description>You&amp;rsquo;re working on a feature and someone tells you that one of your models needs to be ordered based on some complicated rule. You realize you&amp;rsquo;ll need to write a complex order by query&amp;hellip;
Here&amp;rsquo;s how it usually goes:
 You think to yourself: &amp;ldquo;Should I write an order by case when statement? Maybe I&amp;rsquo;ll just add a little bit of SQL&amp;hellip;&amp;quot; Two minutes later, you end up with a bunch of nested case when statements, subqueries, common table expressions, angry statements, shouting, and a whole lot of tears.</description>
    </item>
    
    <item>
      <title>What&#39;s the Best Way to Learn Webpack?</title>
      <link>https://www.thd.codes/posts/how-to-learn-webpack/</link>
      <pubDate>Sat, 05 Jun 2021 10:32:34 -0700</pubDate>
      
      <guid>https://www.thd.codes/posts/how-to-learn-webpack/</guid>
      <description>If you&amp;rsquo;re feeling lost whenever you have to add some javascript library to your Rails application, this post is for you!
I see a lot of people battling against Webpacker whenever they need to add a new javascript library or have to fix a bug on the asset pipeline. I suffered from the same problems, too. I talked about why this happens on a previous post:
&amp;ldquo;Adding Bootstrap or Javascript Sprinkles to Rails breaks everything.</description>
    </item>
    
    <item>
      <title>Adding Bootstrap or Javascript Sprinkles to Rails breaks everything. What should you do?</title>
      <link>https://www.thd.codes/posts/rails-and-webpack-pain/</link>
      <pubDate>Fri, 04 Jun 2021 10:32:34 -0700</pubDate>
      
      <guid>https://www.thd.codes/posts/rails-and-webpack-pain/</guid>
      <description>Did you spend a billion hours trying to add jQuery, or Bootstrap, or Tailwind to your Rails project, but now everything on the frontend is broken?
Or worse: you can&amp;rsquo;t even tell whether the frontend is broken or not. It&amp;rsquo;s in a unkown state of brokenness.
Maybe you just want some javascript sprinkles, but Webpacker makes things so much harder and frustrating.
Should you just wait until an angry customer complains about the checkout button not working anymore to know which page to fix?</description>
    </item>
    
    <item>
      <title>Move From Sprockets to Webpacker On Small to Large Rails Apps</title>
      <link>https://www.thd.codes/posts/from-sprockets-to-webpacker/</link>
      <pubDate>Mon, 24 May 2021 10:13:18 -0700</pubDate>
      
      <guid>https://www.thd.codes/posts/from-sprockets-to-webpacker/</guid>
      <description>Rails 6 comes with Sprockets and Webpacker by default. Confusing, right?
The default configuration is Webpacker for Javascript while Sprockets takes care of all the rest (CSS, images, fonts&amp;hellip;).
Let me tell you a secret: You don&amp;rsquo;t need both. Just use Webpacker.
 Legacy applications and older gems still use Sprockets to serve assets. This was done to add backwards compatibility. If you don&amp;rsquo;t have a good reason to keep Sprockets around, don&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>How to pick your first Rails Issue and start contributing to Open-Source</title>
      <link>https://www.thd.codes/posts/picking-a-rails-issue/</link>
      <pubDate>Wed, 12 May 2021 13:52:50 -0700</pubDate>
      
      <guid>https://www.thd.codes/posts/picking-a-rails-issue/</guid>
      <description>Did you always want to help an open-source project like Ruby on Rails, but never got started?
Many people have the interest of contributing to open-source, myself included. I&amp;rsquo;ve done a couple of small contributions, but nothing fancy.
It&amp;rsquo;s a little intimidating, right? You&amp;rsquo;re not part of the group of contributors and you don&amp;rsquo;t really know where to start. You see 800 open issues, but which one should you pick?</description>
    </item>
    
    <item>
      <title>How should I change production data on a new Rails application?</title>
      <link>https://www.thd.codes/posts/rails-data-migrations/</link>
      <pubDate>Tue, 13 Apr 2021 13:32:34 -0700</pubDate>
      
      <guid>https://www.thd.codes/posts/rails-data-migrations/</guid>
      <description>You need to change production data. You know that doing it manually is unsafe and will definetely cause lots of trouble, like corrupting all you customer&amp;rsquo;s data.
How else should you do it?
You might be spending a lot of time asking yourself these questions:
 Is there a proper rails way to change data in production? Should I run data and schema modifications in one database migration? Should I run rake scripts in production to modify data?</description>
    </item>
    
  </channel>
</rss>
